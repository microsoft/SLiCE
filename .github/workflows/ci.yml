name: CI

on:
  push:
    branches: [ main, 'release/*' ]
    tags: [ 'v*' ]  # Also run on release candidate tags
  pull_request:
    branches: [ main, 'release/*' ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce matrix size
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.9'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 slice --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 slice --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check formatting with black
      run: |
        black --check slice tests examples

    - name: Check import sorting with isort
      run: |
        isort --check-only slice tests examples

    - name: Type checking with mypy
      run: |
        mypy slice
      continue-on-error: true  # Allow mypy to fail for now

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=slice --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Test CLI functionality
      run: |
        # Test CLI help
        slice-eval --help
        
        # Create test files for CLI (cross-platform)
        python -c "import json; open('test_pred.json', 'w').write(json.dumps({'source_schema': 'test', 'source_table': 'test', 'transformation': 'test', 'aggregation': 'test'}))"
        python -c "import json; open('test_truth.json', 'w').write(json.dumps({'source_schema': 'test', 'source_table': 'test', 'transformation': 'test', 'aggregation': 'test'}))"
        
        # Test CLI evaluation
        slice-eval test_pred.json test_truth.json
        
        # Clean up (cross-platform)
        python -c "import os; os.remove('test_pred.json'); os.remove('test_truth.json')"

  package-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import slice; print('Package import successful')"
        slice-eval --version