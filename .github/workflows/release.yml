name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # Run CI tests first
  test:
    uses: ./.github/workflows/ci.yml
    
  # Only create release if CI passes  
  create-release:
    runs-on: ubuntu-latest
    needs: test  # Wait for CI to succeed
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: |
        python -m build

    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "## Changes since $LAST_TAG" > release_notes.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "- First release of SLiCE package" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "pip install slice-score==$VERSION" >> release_notes.md
        echo "\`\`\`" >> release_notes.md

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.release_notes.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/slice_score-${{ steps.release_notes.outputs.VERSION }}-py3-none-any.whl
        asset_name: slice_score-${{ steps.release_notes.outputs.VERSION }}-py3-none-any.whl
        asset_content_type: application/zip